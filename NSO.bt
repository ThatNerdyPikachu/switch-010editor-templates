LittleEndian();
DisplayFormatHex();

typedef struct {
	uint32 Flags_TextCompress : 1;
	uint32 Flags_RoCompress   : 1;
	uint32 Flags_DataCompress : 1;
	uint32 Flags_TextHash     : 1;
	uint32 Flags_RoHash       : 1;
	uint32 Flags_DataHash     : 1;
} Flags;

typedef struct {
	uint32 file_offset;
	uint32 memory_offset;
	uint32 size;
} SegmentHeader;

typedef struct {
	uint32 offset;
	uint32 size;
} SecondarySegmentHeader;

struct {
	char   magic[0x4];
	uint32 version;
	uint32 reserved_1;
	Flags  flags;
	SegmentHeader text;
	uint32 module_name_offset;
	SegmentHeader ro;
	uint32 module_name_size;
	SegmentHeader data;
	uint32 bss_size;
	ubyte  module_id[0x20];
	uint32 text_file_size;
	uint32 ro_file_size;
	uint32 data_file_size;
	ubyte  reserved_2[0x1C];
	SecondarySegmentHeader embedded; /* api_info */
	SecondarySegmentHeader dyn_str;
	SecondarySegmentHeader dyn_sym;
	ubyte  text_hash[0x20];
	ubyte  ro_hash[0x20];
	ubyte  data_hash[0x20];
} nso_header;

typedef struct {
	uint32 entry_point_insn;
	uint32 mod_offset;
} RoCrt;

typedef struct {
	RoCrt ro_crt;
	if (entry_point_insn > 0) { /* Libnx NSO */
		char reserved_1[0x8]; /* "HOMEBREW" */
	}
} ModStart;

typedef struct {
	char   magic[0x4];
	uint32 dynamic_offset;
	uint32 bss_start_offset;
	uint32 bss_end_offset;
	uint32 eh_frame_hdr_start_offset;
	uint32 eh_frame_hdr_end_offset;
	uint32 module_object_offset;
} ModHeader;

if (nso_header.module_name_offset == 0x100 && nso_header.module_name_size > 0) { /* Application NSO */
	FSeek(nso_header.module_name_offset);
	struct {
		ubyte name_length;
		char  name[name_length];
	} module_name;

	if (nso_header.flags.Flags_TextCompress & nso_header.flags.Flags_RoCompress & nso_header.flags.Flags_DataCompress) {
		FSkip(0x2); /* Unknown */
	}
	
	if (FileNameGetBase(GetFileName(), false) != "rtld") {
		ModStart mod_start;
		ModHeader mod_header;
	}
} else { /* Hactool/Libnx NSO */
	if (!nso_header.flags.Flags_TextCompress & !nso_header.flags.Flags_RoCompress & !nso_header.flags.Flags_DataCompress) {
		ModStart mod_start;
		
		if (FileNameGetBase(GetFileName(), false) != "rtld") {
			FSeek(0x100 + mod_start.ro_crt.mod_offset);
			ModHeader mod_header;
		}
	} else {
		FSkip(0x2);
		ModStart mod_start;
		
		if (FileNameGetBase(GetFileName(), false) != "rtld") {
			FSeek(0x1C8);
			ModHeader mod_header;
		}
	}
	
	if (mod_start.ro_crt.entry_point_insn != 0) {
		struct {
			char   magic[0x4];
			uint32 got_start_offset;
			uint32 got_end_offset;
		} lny_header;
	}
}
