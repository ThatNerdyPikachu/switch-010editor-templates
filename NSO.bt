LittleEndian();
DisplayFormatHex();

struct Flags {
	uint32 Flags_TextCompress : 1;
	uint32 Flags_RoCompress   : 1;
	uint32 Flags_DataCompress : 1;
	uint32 Flags_TextHash     : 1;
	uint32 Flags_RoHash       : 1;
	uint32 Flags_DataHash     : 1;
	uint32 Flags_Reserved1    : 26;
};

struct SegmentHeader {
	uint32 file_offset;
	uint32 memory_offset;
	uint32 size;
};

struct SectionHeader {
	uint32 offset;
	uint32 size;
};

struct NsoHeader {
	char   magic[0x4];
	uint32 version;
	uint32 reserved_1;
	Flags  flags;
	SegmentHeader text_segment_header;
	uint32 module_name_offset;
	SegmentHeader ro_segment_header;
	uint32 module_name_size;
	SegmentHeader data_segment_header;
	uint32 bss_size;
	ubyte  module_id[0x20];
	uint32 text_file_size;
	uint32 ro_file_size;
	uint32 data_file_size;
	ubyte  reserved_2[0x1C];
	SectionHeader embedded_section_header; /* api_info */
	SectionHeader dyn_str_section_header;
	SectionHeader dyn_sym_section_header;
	ubyte  text_hash[0x20];
	ubyte  ro_hash[0x20];
	ubyte  data_hash[0x20];
} nso_header;

struct ModuleName {
	ubyte name_length;
	char  name[name_length];
};

struct RoCrt {
	uint32 entry_point;
	uint32 mod_offset;
};

struct ModStart {
	RoCrt ro_crt;
	if (ReadString(FTell(), 0x8) == "HOMEBREW") {
		char reserved_1[0x8];
	}
};

struct ModHeader {
	char   magic[0x4];
	uint32 dynamic_offset;
	uint32 bss_start_offset;
	uint32 bss_end_offset;
	uint32 eh_frame_hdr_start_offset;
	uint32 eh_frame_hdr_end_offset;
	uint32 module_object_offset;
};

struct LnyHeader {
	char   magic[0x4];
	uint32 got_start_offset;
	uint32 got_end_offset;
};

struct ModuleInfo {
	uint32 name_length;
	char   name[name_length];
};

uint32 AlignUp(uint32 offset, uint32 alignment) {
	local uint32 mask = alignment - 1;
	return (mask + offset) & ~mask;
}

struct NsoBody {
	FSeek(nso_header.text_segment_header.file_offset);
	ubyte text_segment[nso_header.text_file_size];
	FSeek(nso_header.ro_segment_header.file_offset);
	ubyte ro_segment[nso_header.ro_file_size];
	FSeek(nso_header.data_segment_header.file_offset);
	ubyte data_segment[nso_header.data_file_size];
	if (nso_header.module_name_offset == 0x100 && nso_header.module_name_size != 0) {
		FSeek(nso_header.module_name_offset);
		ModuleName module_name;
	}
	if (!nso_header.flags.Flags_TextCompress) {
		FSeek(nso_header.text_segment_header.file_offset);
		ModStart mod_start;
		FSeek(nso_header.text_segment_header.file_offset + mod_start.ro_crt.mod_offset);
		if ((nso_header.text_segment_header.file_offset + mod_start.ro_crt.mod_offset) < nso_header.ro_segment_header.file_offset) {
			ModHeader mod_header;
		}
		if (ReadString(FTell(), 0x4) == "LNY0") {
			LnyHeader lny_header;
		}
	}
	if (!nso_header.flags.Flags_RoCompress) {
		FSeek(nso_header.ro_segment_header.file_offset + 0x4);
		ModuleInfo module_info;
		if (!exists(mod_header)) {
			/* If ModHeader is in RO, there is another ModStart struct at mod_offset - 0x8. */
			FSeek(AlignUp(startof(module_info) + sizeof(module_info), 0x4) + 0x8);
			ModHeader mod_header;
		}
		FSeek(nso_header.ro_segment_header.file_offset + nso_header.embedded_section_header.offset);
		ubyte embedded_section[nso_header.embedded_section_header.size];
		FSeek(nso_header.ro_segment_header.file_offset + nso_header.dyn_str_section_header.offset);
		ubyte dyn_str_section[nso_header.dyn_str_section_header.size];
		FSeek(nso_header.ro_segment_header.file_offset + nso_header.dyn_sym_section_header.offset);
		ubyte dyn_sym_section[nso_header.dyn_sym_section_header.size];
	}
} nso_body;
