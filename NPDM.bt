LittleEndian();
DisplayFormatHex();

typedef struct {
	ubyte FLAG_IS_64_BIT_INSTRUCTION : 1;
	ubyte FLAG_ADDRESS_SPACE_64_BIT_OLD : 1;
	ubyte FLAG_ADDRESS_SPACE_32_BIT_NO_RESERVED : 1;
	ubyte FLAG_ADDRESS_SPACE_64_BIT : 1;
	ubyte FLAG_OPTIMIZE_MEMORY_ALLOCATION : 1;
} meta_flags_t;

struct {
	char magic[0x4];
	uint64 padding_1;
	meta_flags_t flags;
	ubyte padding_2;
	ubyte main_thread_priority;
	ubyte main_thread_core_number;
	uint32 padding_3;
	uint32 system_resource_size;
	uint32 version;
	uint32 main_thread_stack_size;
	char name[0x10];
	char product_code[0x10];
	ubyte padding_4[0x30];
	uint32 aci0_offset;
	uint32 aci0_size;
	uint32 acid_offset;
	uint32 acid_size;
} meta_header;

typedef struct {
	ubyte FLAG_PRODUCTION : 1;
	ubyte FLAG_UNQUALIFIED_APPROVAL : 1;
	ubyte FLAG_POOL_PARTITION : 2;
	ubyte padding_1[0x3];
} acid_flags_t;

typedef struct {
	ubyte PRESET_APPLICATION_INFO : 1;
	ubyte PRESET_BOOT_MODE_CONTROL : 1;
	ubyte PRESET_CALIBRATION : 1;
	ubyte PRESET_SYSTEM_SAVE_DATA : 1;
	ubyte PRESET_GAME_CARD : 1;
	ubyte PRESET_SAVE_DATA_BACKUP : 1;
	ubyte PRESET_SAVE_DATA_MANAGEMENT : 1;
	ubyte PRESET_BIS_ALL_RAW : 1;
	ubyte PRESET_GAME_CARD_RAW : 1;
	ubyte PRESET_GAME_CARD_PRIVATE : 1;
	ubyte PRESET_SET_TIME : 1;
	ubyte PRESET_CONTENT_MANAGER : 1;
	ubyte PRESET_IMAGE_MANAGER : 1;
	ubyte PRESET_CREATE_SAVE_DATA : 1;
	ubyte PRESET_SYSTEM_SAVE_DATA_MANAGEMENT : 1;
	ubyte PRESET_BIS_FILE_SYSTEM : 1;
	ubyte PRESET_SYSTEM_UPDATE : 1;
	ubyte PRESET_SAVE_DATA_META : 1;
	ubyte PRESET_DEVICE_SAVE_DATA : 1;
	ubyte PRESET_SETTINGS_CONTROL : 1;
	ubyte PRESET_SYSTEM_DATA : 1;
	ubyte PRESET_SD_CARD : 1;
	ubyte PRESET_HOST : 1;
	ubyte PRESET_FILL_BIS : 1;
	ubyte PRESET_CORRUPT_SAVE_DATA : 1;
	ubyte PRESET_SAVE_DATA_FOR_DEBUG : 1;
	ubyte PRESET_FORMAT_SD_CARD : 1;
	ubyte PRESET_GET_RIGHTS_ID : 1;
	ubyte PRESET_REGISTER_EXTERNAL_KEY : 1;
	ubyte PRESET_REGISTER_UPDATE_PARTITION : 1;
	ubyte PRESET_SAVE_DATA_TRANSFER : 1;
	ubyte PRESET_DEVICE_DETECTION : 1;
	ubyte PRESET_ACCESS_FAILURE_RESOLUTION : 1;
	ubyte PRESET_SAVE_DATA_TRANSFER_VERSION_2 : 1;
	ubyte PRESET_REGISTER_PROGRAM_INDEX_MAP_INFO : 1;
	ubyte PRESET_CREATE_OWN_SAVE_DATA : 1;
	ubyte padding_1[0x2];
	ubyte : 6;
	ubyte PRESET_DEBUG : 1;
	ubyte PRESET_FULL_PERMISSION : 1;
} flag_presets_bit_t;

typedef struct {
	ubyte version;
	ubyte content_owner_id_count;
	ubyte save_data_owner_id_count;
	ubyte padding_1;
	flag_presets_bit_t flag_presets_bit;
	uint64 content_owner_id_min;
	uint64 content_owner_id_max;
	uint64 save_data_owner_id_min;
	uint64 save_data_owner_id_max;
	if (content_owner_id_count > 0) {
		uint64 content_owner_id[content_owner_id_count];
	}
	if (save_data_owner_id_count > 0) {
		uint64 save_data_owner_id[save_data_owner_id_count];
	}
} fac_descriptor_t;

typedef struct {
	ubyte DESCRIPTOR_NAME_LENGTH : 3;
	ubyte : 4;
	ubyte DESCRIPTOR_IS_SERVER : 1;
} descriptor_t;

typedef struct {
	descriptor_t descriptor;
	char name[descriptor.DESCRIPTOR_NAME_LENGTH + 1];
} sac_entry_t;

struct {
	ubyte signature[0x100];
	ubyte modulus[0x100];
	char magic[0x4];
	uint32 sign_size;
	uint32 padding_1;
	acid_flags_t flags;
	uint64 program_id_min;
	uint64 program_id_max;
	uint32 fac_offset;
	uint32 fac_size;
	uint32 sac_offset;
	uint32 sac_size;
	uint32 kc_offset;
	uint32 kc_size;
	uint64 padding_2;
	fac_descriptor_t fac_descriptor;
	FSeek(meta_header.acid_offset + sac_offset);
	struct {
		do {
			sac_entry_t sac_entry;
		} while (FTell() < meta_header.acid_offset + sac_offset + sac_size);
	} sac_data;
	// kc_data
} acid_header;

typedef enum {
	ACCESSIBILITY_READ = 1,
	ACCESSIBILITY_WRITE,
	ACCESSIBILITY_READ_WRITE
} accessibility_t;

typedef struct {
	ubyte version;
	ubyte padding_1[0x3];
	flag_presets_bit_t flag_presets_bit;
	uint32 content_owner_info_offset;
	uint32 content_owner_info_size;
	uint32 save_data_owner_info_offset;
	uint32 save_data_owner_info_size;
	if (content_owner_info_size > 0) {
		uint32 content_owner_id_count;
		uint64 content_owner_id[content_owner_id_count];
	}
	if (save_data_owner_info_size > 0) {
		uint32 save_data_owner_id_count;
		accessibility_t accessibility;
		uint64 save_data_owner_id[save_data_owner_id_count];
	}
} fac_data_t;

FSeek(meta_header.aci0_offset);
struct {
	char magic[0x4];
	ubyte padding_1[0xC];
	uint64 program_id;
	uint64 padding_2;
	uint32 fac_offset;
	uint32 fac_size;
	uint32 sac_offset;
	uint32 sac_size;
	uint32 kc_offset;
	uint32 kc_size;
	uint64 padding_3;
	fac_data_t fac_data;
	FSeek(meta_header.aci0_offset + sac_offset);
	struct {
		do {
			sac_entry_t sac_entry;
		} while (FTell() < meta_header.aci0_offset + sac_offset + sac_size);
	} sac_data;
	// kc_data
} aci0_header;
