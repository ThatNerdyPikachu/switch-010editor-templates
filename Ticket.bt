LittleEndian();
DisplayFormatHex();

local uint32 i, j;

enum <uint32> SigType {
	SigType_Rsa4096Sha1   = 65536,
	SigType_Rsa2048Sha1   = 65537,
	SigType_Ecc480Sha1    = 65538,
	SigType_Rsa4096Sha256 = 65539,
	SigType_Rsa2048Sha256 = 65540,
	SigType_Ecc480Sha256  = 65541,
	SigType_Hmac160Sha1   = 65542
};

struct SignatureBlock {
	SigType sig_type;
	switch (sig_type) {
		case SigType_Rsa4096Sha1:
		case SigType_Rsa4096Sha256:
			ubyte sign[0x200];
			ubyte reserved_1[0x3C];
			break;
		case SigType_Rsa2048Sha1:
		case SigType_Rsa2048Sha256:
			ubyte sign[0x100];
			ubyte reserved_1[0x3C];
			break;
		case SigType_Ecsda480Sha1:
		case SigType_Ecsda480Sha256:
			ubyte sign[0x3C];
			ubyte reserved_1[0x40];
			break;
		case SigType_Hmac160Sha1:
			ubyte sign[0x14];
			ubyte reserved_1[0x28];
			break;
	}
	char issuer[0x40];
};

enum <ubyte> TitleKeyType {
	TitleKeyType_Common       = 0,
	TitleKeyType_Personalized = 1
};

enum <ubyte> LicenseType {
	LicenseType_Permanent    = 0,
	LicenseType_Demo         = 1,
	LicenseType_Trial        = 2,
	LicenseType_Rental       = 3,
	LicenseType_Subscription = 4,
	LicenseType_Service      = 5
};

struct PropertyMask {
	uint16 PropertyMask_PreInstallation       : 1;
	uint16 PropertyMask_SharedTitle           : 1;
	uint16 PropertyMask_AllContents           : 1;
	uint16 PropertyMask_DeviceLinkIndependent : 1;
	uint16 PropertyMask_Volatile              : 1;
	uint16 PropertyMask_ELicenseRequired      : 1;
	uint16 PropertyMask_Reserved1             : 10;
};

enum <uint16> SectionType {
	SectionType_Permanent          = 1,
	SectionType_Subscription       = 2,
	SectionType_Content            = 3,
	SectionType_ContentConsumption = 4,
	SectionType_AccessTitle        = 5,
	SectionType_LimitedResource    = 6
};

struct ESV1PermanentRecord {
	ubyte  ref_id[0x10];
	uint32 ref_id_attr;
};

struct ESV1SubscriptionRecord {
	uint32 limit;
	ubyte  ref_id[0x10];
	uint32 ref_id_attr;
};

struct ESV1ContentRecord {
	uint32 offset;
	ubyte  access_mask[0x80];
};

struct ESV1ContentConsumptionRecord {
	uint16 index;
	uint16 code;
	uint32 limit;
};

struct ESV1AccessTitleRecord {
	uint64 access_title_id;
	uint64 access_title_mask;
};

struct ESV1LimitedResourceRecord {
	uint32 limit;
	ubyte  ref_id[0x10];
	uint32 ref_id_attr;
};

struct ESV2SectionRecord {
	uint32 sect_offset;
	uint32 record_size;
	uint32 section_size;
	uint16 records; /* record_count */
	SectionType section_type;
	for (j = 0; j < records; j++) {
		switch (section_type) {
			case SectionType_Permanent:
				ESV1PermanentRecord es_v1_permanent_record;
				break;
			case SectionType_Subscription:
				ESV1SubscriptionRecord es_v1_subscription_record;
				break;
			case SectionType_Content:
				ESV1ContentRecord es_v1_content_record;
				break;
			case SectionType_ContentConsumption:
				ESV1ContentConsumptionRecord es_v1_content_consumption_record;
				break;
			case SectionType_AccessTitle:
				ESV1AccessTitleRecord es_v1_access_title_record;
				break;
			case SectionType_LimitedResource:
				ESV1LimitedResourceRecord es_v1_limited_resource_record;
				break;
		}
	}
};

struct Ticket {
	SignatureBlock signature_block;
	ubyte  title_key[0x100];
	ubyte  format_version;
	TitleKeyType title_key_type;
	uint16 ticket_version;
	LicenseType license_type;
	ubyte  common_key_id; /* key_generation */
	PropertyMask property_mask;
	uint64 reserved_2;
	uint64 ticket_id;
	uint64 device_id;
	ubyte  rights_id[0x10];
	uint32 account_id;
	uint32 sect_total_size;
	uint32 sect_hdr_offset;
	uint16 sect_hdrs; /* sect_hdr_count */
	uint16 sect_hdr_entry_size;
	for (i = 0; i < sect_hdrs; i++) {
		ESV2SectionRecord es_v2_section_records;
	}
} ticket;

enum <uint32> PubKeyType {
	PubKeyType_Rsa4096 = 0,
	PubKeyType_Rsa2048 = 1,
	PubKeyType_Ecc480  = 2
};

struct CertHeader {
	PubKeyType pub_key_type;
	char   subject[0x40]; /* ServerId, DeviceId */
	uint32 date;
};

struct PublicKeyBlock {
	switch (cert_header.pub_key_type) {
		case PubKeyType_Rsa4096:
			ubyte  public_key[0x200];
			uint32 public_exponent;
			ubyte  reserved_1[0x34];
			break;
		case PubKeyType_Rsa2048:
			ubyte  public_key[0x100];
			uint32 public_exponent;
			ubyte  reserved_1[0x34];
			break;
		case PubKeyType_Ecc480:
			ubyte  public_key[0x3C];
			ubyte  reserved_1[0x3C];
			break;
	}
};

struct Cert {
	SignatureBlock signature_block;
	CertHeader cert_header;
	PublicKeyBlock public_key_block;
};

BigEndian();
while (FTell() < FileSize()) {
	Cert cert;
}
