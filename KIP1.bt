LittleEndian();
DisplayFormatHex();
/* BitfieldDisablePadding(); */

local uint32 i, descriptor_start, descriptor_count, descriptor, index;
local ubyte  current_page;

enum <uint32> EntryNumber {
	EntryNumber_ThreadInfo        = 3,
	EntryNumber_EnableSystemCalls = 4,
	EntryNumber_MemoryMap         = 6,
	EntryNumber_IoMemoryMap       = 7,
	EntryNumber_MemoryRegionMap   = 10,
	EntryNumber_EnableInterrupts  = 11,
	EntryNumber_MiscParams        = 13,
	EntryNumber_KernelVersion     = 14,
	EntryNumber_HandleTableSize   = 15,
	EntryNumber_MiscFlags         = 16
};

local EntryNumber entry_number;

enum <ubyte> ProcessAddressSpace {
	ProcessAddressSpace_AddressSpace32Bit = 0,
	ProcessAddressSpace_AddressSpace64Bit = 1
};

enum <ubyte> MemoryRegion {
	MemoryRegion_NonSecureSystem = 0,
	MemoryRegion_SecureSystem    = 1
};

struct Flags {
	ubyte Flags_TextCompress       : 1;
	ubyte Flags_RoCompress         : 1;
	ubyte Flags_DataCompress       : 1;
	ubyte Flags_Is64BitInstruction : 1;
	ProcessAddressSpace Flags_ProcessAddressSpace : 1;
	MemoryRegion Flags_MemoryRegion : 1;
	ubyte Flags_Reserved1          : 2;
};

struct SegmentHeader {
	uint32 memory_offset;
	uint32 size;
	uint32 file_size;
};

struct ThreadInfo {
	uint32 entry_number     : 3;
	uint32 reserved_1       : 1;
	uint32 lowest_priority  : 6;
	uint32 highest_priority : 6;
	uint32 min_core_number  : 8;
	uint32 max_core_number  : 8;
};

struct SystemCallIds {
	/* Workaround for BitfieldDisablePadding() bug. It's not pretty and causes the size in the variables tab to show 0. */
	FSkip(-0x4);
	uint32 : 5;
	switch (index) {
		case 0:
			uint32 SystemCallId_Unknown1                       : 1;
			uint32 SystemCallId_SetHeapSize                    : 1;
			uint32 SystemCallId_SetMemoryPermission            : 1;
			uint32 SystemCallId_SetMemoryAttribute             : 1;
			uint32 SystemCallId_MapMemory                      : 1;
			uint32 SystemCallId_UnmapMemory                    : 1;
			uint32 SystemCallId_QueryMemory                    : 1;
			uint32 SystemCallId_ExitProcess                    : 1;
			uint32 SystemCallId_CreateThread                   : 1;
			uint32 SystemCallId_StartThread                    : 1;
			uint32 SystemCallId_ExitThread                     : 1;
			uint32 SystemCallId_SleepThread                    : 1;
			uint32 SystemCallId_GetThreadPriority              : 1;
			uint32 SystemCallId_SetThreadPriority              : 1;
			uint32 SystemCallId_GetThreadCoreMask              : 1;
			uint32 SystemCallId_SetThreadCoreMask              : 1;
			uint32 SystemCallId_GetCurrentProcessorNumber      : 1;
			uint32 SystemCallId_SignalEvent                    : 1;
			uint32 SystemCallId_ClearEvent                     : 1;
			uint32 SystemCallId_MapSharedMemory                : 1;
			uint32 SystemCallId_UnmapSharedMemory              : 1;
			uint32 SystemCallId_CreateTransferMemory           : 1;
			uint32 SystemCallId_CloseHandle                    : 1;
			uint32 SystemCallId_ResetSignal                    : 1;
			break;
		case 1:
			uint32 SystemCallId_WaitSynchronization            : 1;
			uint32 SystemCallId_CancelSynchronization          : 1;
			uint32 SystemCallId_ArbitrateLock                  : 1;
			uint32 SystemCallId_ArbitrateUnlock                : 1;
			uint32 SystemCallId_WaitProcessWideKeyAtomic       : 1;
			uint32 SystemCallId_SignalProcessWideKey           : 1;
			uint32 SystemCallId_GetSystemTick                  : 1;
			uint32 SystemCallId_ConnectToNamedPort             : 1;
			uint32 SystemCallId_SendSyncRequestLight           : 1;
			uint32 SystemCallId_SendSyncRequest                : 1;
			uint32 SystemCallId_SendSyncRequestWithUserBuffer  : 1;
			uint32 SystemCallId_SendAsyncRequestWithUserBuffer : 1;
			uint32 SystemCallId_GetProcessId                   : 1;
			uint32 SystemCallId_GetThreadId                    : 1;
			uint32 SystemCallId_Break                          : 1;
			uint32 SystemCallId_OutputDebugString              : 1;
			uint32 SystemCallId_ReturnFromException            : 1;
			uint32 SystemCallId_GetInfo                        : 1;
			uint32 SystemCallId_FlushEntireDataCache           : 1;
			uint32 SystemCallId_FlushDataCache                 : 1;
			uint32 SystemCallId_MapPhysicalMemory              : 1;
			uint32 SystemCallId_UnmapPhysicalMemory            : 1;
			uint32 SystemCallId_GetDebugFutureThreadInfo       : 1;
			uint32 SystemCallId_GetLastThreadInfo              : 1;
			break;
		case 2:
			uint32 SystemCallId_GetResourceLimitLimitValue     : 1;
			uint32 SystemCallId_GetResourceLimitCurrentValue   : 1;
			uint32 SystemCallId_SetThreadActivity              : 1;
			uint32 SystemCallId_GetThreadContext3              : 1;
			uint32 SystemCallId_WaitForAddress                 : 1;
			uint32 SystemCallId_SignalToAddress                : 1;
			uint32 SystemCallId_SynchronizePreemptionState     : 1;
			uint32 SystemCallId_Unknown2                       : 1;
			uint32 SystemCallId_Unknown3                       : 1;
			uint32 SystemCallId_Unknown4                       : 1;
			uint32 SystemCallId_Unknown5                       : 1;
			uint32 SystemCallId_Unknown6                       : 1;
			uint32 SystemCallId_KernelDebug                    : 1;
			uint32 SystemCallId_ChangeKernelTraceState         : 1;
			uint32 SystemCallId_Unknown7                       : 1;
			uint32 SystemCallId_Unknown8                       : 1;
			uint32 SystemCallId_CreateSession                  : 1;
			uint32 SystemCallId_AcceptSession                  : 1;
			uint32 SystemCallId_ReplyAndReceiveLight           : 1;
			uint32 SystemCallId_ReplyAndReceive                : 1;
			uint32 SystemCallId_ReplyAndReceiveWithUserBuffer  : 1;
			uint32 SystemCallId_CreateEvent                    : 1;
			uint32 SystemCallId_Unknown9                       : 1;
			uint32 SystemCallId_Unknown10                      : 1;
			break;
		case 3:
			uint32 SystemCallId_MapPhysicalMemoryUnsafe        : 1;
			uint32 SystemCallId_UnmapPhysicalMemoryUnsafe      : 1;
			uint32 SystemCallId_SetUnsafeLimit                 : 1;
			uint32 SystemCallId_CreateCodeMemory               : 1;
			uint32 SystemCallId_ControlCodeMemory              : 1;
			uint32 SystemCallId_SleepSystem                    : 1;
			uint32 SystemCallId_ReadWriteRegister              : 1;
			uint32 SystemCallId_SetProcessActivity             : 1;
			uint32 SystemCallId_CreateSharedMemory             : 1;
			uint32 SystemCallId_MapTransferMemory              : 1;
			uint32 SystemCallId_UnmapTransferMemory            : 1;
			uint32 SystemCallId_CreateInterruptEvent           : 1;
			uint32 SystemCallId_QueryPhysicalAddress           : 1;
			uint32 SystemCallId_QueryIoMapping                 : 1;
			uint32 SystemCallId_CreateDeviceAddressSpace       : 1;
			uint32 SystemCallId_AttachDeviceAddressSpace       : 1;
			uint32 SystemCallId_DetachDeviceAddressSpace       : 1;
			uint32 SystemCallId_MapDeviceAddressSpaceByForce   : 1;
			uint32 SystemCallId_MapDeviceAddressSpaceAligned   : 1;
			uint32 SystemCallId_MapDeviceAddressSpace          : 1;
			uint32 SystemCallId_UnmapDeviceAddressSpace        : 1;
			uint32 SystemCallId_InvalidateProcessDataCache     : 1;
			uint32 SystemCallId_StoreProcessDataCache          : 1;
			uint32 SystemCallId_FlushProcessDataCache          : 1;
			break;
		case 4:
			uint32 SystemCallId_DebugActiveProcess             : 1;
			uint32 SystemCallId_BreakDebugProcess              : 1;
			uint32 SystemCallId_TerminateDebugProcess          : 1;
			uint32 SystemCallId_GetDebugEvent                  : 1;
			uint32 SystemCallId_ContinueDebugEvent             : 1;
			uint32 SystemCallId_GetProcessList                 : 1;
			uint32 SystemCallId_GetThreadList                  : 1;
			uint32 SystemCallId_GetDebugThreadContext          : 1;
			uint32 SystemCallId_SetDebugThreadContext          : 1;
			uint32 SystemCallId_QueryDebugProcessMemory        : 1;
			uint32 SystemCallId_ReadDebugProcessMemory         : 1;
			uint32 SystemCallId_WriteDebugProcessMemory        : 1;
			uint32 SystemCallId_SetHardwareBreakPoint          : 1;
			uint32 SystemCallId_GetDebugThreadParam            : 1;
			uint32 SystemCallId_Unknown11                      : 1;
			uint32 SystemCallId_GetSystemInfo                  : 1;
			uint32 SystemCallId_CreatePort                     : 1;
			uint32 SystemCallId_ManageNamedPort                : 1;
			uint32 SystemCallId_ConnectToPort                  : 1;
			uint32 SystemCallId_SetProcessMemoryPermission     : 1;
			uint32 SystemCallId_MapProcessMemory               : 1;
			uint32 SystemCallId_UnmapProcessMemory             : 1;
			uint32 SystemCallId_QueryProcessMemory             : 1;
			uint32 SystemCallId_MapProcessCodeMemory           : 1;
			break;
		case 5:
			uint32 SystemCallId_UnmapProcessCodeMemory         : 1;
			uint32 SystemCallId_CreateProcess                  : 1;
			uint32 SystemCallId_StartProcess                   : 1;
			uint32 SystemCallId_TerminateProcess               : 1;
			uint32 SystemCallId_GetProcessInfo                 : 1;
			uint32 SystemCallId_CreateResourceLimit            : 1;
			uint32 SystemCallId_SetResourceLimitLimitValue     : 1;
			uint32 SystemCallId_CallSecureMonitor              : 1;
			uint32 SystemCallId_Reserved1                      : 16;
			break;
	}
};

struct EnableSystemCalls {
	uint32 entry_number : 4;
	uint32 reserved_1   : 1;
	SystemCallIds system_call_ids;
	uint32 index        : 3;
};

enum <uint32> PermissionType {
	PermissionType_RW = 0,
	PermissionType_RO = 1
};

enum <uint32> MappingType {
	MappingType_Io     = 0,
	MappingType_Static = 1
};

struct MemoryMap {
	uint32 entry_number : 6;
	uint32 reserved_1   : 1;
	if (!current_page) {
		uint32 begin_address : 24; /* begin_address << 12 */
		PermissionType permission_type : 1;
		current_page = 1;
	} else {
		uint32 size          : 20; /* size << 12 */
		uint32 reserved_2    : 4;
		MappingType mapping_type : 1;
		current_page = 0;
	}
};

struct IoMemoryMap {
	uint32 entry_number  : 7;
	uint32 reserved_1    : 1;
	uint32 begin_address : 24; /* begin_address << 12 */
};

enum <uint32> RegionType {
	RegionType_NoMapping         = 0,
	RegionType_KernelTraceBuffer = 1,
	RegionType_OnMemoryBootImage = 2,
	RegionType_DTB               = 3
};

struct MemoryRegionMap {
	uint32 entry_number : 10;
	uint32 reserved_1   : 1;
	RegionType region_type_1 : 6;
	PermissionType permission_type_1 : 1;
	RegionType region_type_2 : 6;
	PermissionType permission_type_2 : 1;
	RegionType region_type_3 : 6;
	PermissionType permission_type_3 : 1;
};

struct EnableInterrupts {
	uint32 entry_number       : 11;
	uint32 reserved_1         : 1;
	uint32 interrupt_number_1 : 10;
	uint32 interrupt_number_2 : 10;
};

enum <uint32> ProgramType {
	ProgramType_System      = 0,
	ProgramType_Application = 1,
	ProgramType_Applet      = 2
};

struct MiscParams {
	uint32 entry_number : 13;
	uint32 reserved_1   : 1;
	ProgramType program_type : 3;
	uint32 reserved_2   : 15;
};

struct KernelVersion {
	uint32 entry_number  : 14;
	uint32 reserved_1    : 1;
	uint32 minor_version : 4;
	uint32 major_version : 13;
};

struct HandleTableSize {
	uint32 entry_number      : 15;
	uint32 reserved_1        : 1;
	uint32 handle_table_size : 10;
	uint32 reserved_2        : 6;
};

struct MiscFlags {
	uint32 entry_number : 16;
	uint32 reserved_1   : 1;
	uint32 enable_debug : 1;
	uint32 force_debug  : 1;
	uint32 reserved_2   : 13;
};

struct KcData {
	descriptor_start = FTell();
	descriptor_count = 0x80 / 0x4;
	for (i = 0; i < descriptor_count; i++) {
		descriptor = ReadUInt(descriptor_start + (i * 0x4));
		if (descriptor == 0xFFFFFFFF) {
			ubyte reserved_1[(descriptor_count * 0x4) - (i * 0x4)];
			break;
		}
		entry_number = 0;
		while (descriptor & 0x1) {
			descriptor >>= 1;
			entry_number++;
		}
		switch (entry_number) {
			case EntryNumber_ThreadInfo:
				ThreadInfo thread_info;
				break;
			case EntryNumber_EnableSystemCalls:
				index = (descriptor >> 25) & 0x7;
				EnableSystemCalls enable_system_calls;
				break;
			case EntryNumber_MemoryMap:
				MemoryMap memory_map;
				break;
			case EntryNumber_IoMemoryMap:
				IoMemoryMap io_memory_map;
				break;
			case EntryNumber_MemoryRegionMap:
				MemoryRegionMap memory_region_map;
				break;
			case EntryNumber_EnableInterrupts:
				EnableInterrupts enable_interrupts;
				break;
			case EntryNumber_MiscParams:
				MiscParams misc_params;
				break;
			case EntryNumber_KernelVersion:
				KernelVersion kernel_version;
				break;
			case EntryNumber_HandleTableSize:
				HandleTableSize handle_table_size;
				break;
			case EntryNumber_MiscFlags:
				MiscFlags misc_flags;
				break;
		}
	}
};

struct KipHeader {
	char   magic[0x4];
	char   name[0xC];
	uint64 program_id;
	uint32 version;
	ubyte  main_thread_priority;
	ubyte  main_thread_core_number;
	ubyte  reserved_1;
	Flags  flags;
	SegmentHeader text_segment_header;
	uint32 main_thread_affinity_mask;
	SegmentHeader ro_segment_header;
	uint32 main_thread_stack_size;
	SegmentHeader data_segment_header;
	uint32 reserved_2;
	SegmentHeader bss_segment_header;
	ubyte  reserved_3[0x24];
	KcData kc_data;
} kip_header;

struct SegmentFooter {
	uint32 compressed_size;
	uint32 footer_size;
	uint32 additional_size;
};

struct RoCrt {
	uint32 entry_point;
	uint32 mod_offset;
};

struct ModStart {
	RoCrt ro_crt;
	if (ReadString(FTell(), 0x8) == "HOMEBREW") {
		char reserved_1[0x8];
	}
};

struct ModHeader {
	char   magic[0x4];
	uint32 dynamic_offset;
	uint32 bss_start_offset;
	uint32 bss_end_offset;
	uint32 eh_frame_hdr_start_offset;
	uint32 eh_frame_hdr_end_offset;
	uint32 module_object_offset;
};

struct LnyHeader {
	char   magic[0x4];
	uint32 got_start_offset;
	uint32 got_end_offset;
};

struct ModuleInfo {
	uint32 name_length;
	char   name[name_length];
};

uint32 AlignUp(uint32 offset, uint32 alignment) {
	local uint32 mask = alignment - 1;
	return (mask + offset) & ~mask;
}

struct KipBody {
	ubyte text_segment[kip_header.text_segment_header.file_size];
	if (kip_header.flags.Flags_TextCompress) {
		FSeek(startof(text_segment) + kip_header.text_segment_header.file_size - 0xC);
		SegmentFooter text_segment_footer;
	}
	ubyte ro_segment[kip_header.ro_segment_header.file_size];
	if (kip_header.flags.Flags_RoCompress) {
		FSeek(startof(ro_segment) + kip_header.ro_segment_header.file_size - 0xC);
		SegmentFooter ro_segment_footer;
	}
	ubyte data_segment[kip_header.data_segment_header.file_size];
	if (kip_header.flags.Flags_DataCompress) {
		FSeek(startof(data_segment) + kip_header.data_segment_header.file_size - 0xC);
		SegmentFooter data_segment_footer;
	}
	if (!kip_header.flags.Flags_TextCompress) {
		FSeek(startof(text_segment));
		ModStart mod_start;
		if (exists(mod_start.reserved_1)) {
			FSeek(startof(text_segment) + mod_start.ro_crt.mod_offset);
			ModHeader mod_header;
			LnyHeader lny_header;
		}
	}
	if (!kip_header.flags.Flags_RoCompress) {
		FSeek(startof(ro_segment) + 0x4);
		ModuleInfo module_info;
		if (!exists(mod_header)) {
			/* If ModHeader is in RO, there is another ModStart struct at mod_offset - 0x8. */
			FSeek(AlignUp(startof(module_info) + sizeof(module_info), 0x4) + 0x8);
			ModHeader mod_header;
		}
	}
} kip_body;
