LittleEndian();
DisplayFormatHex();

local uint32 offset, i, j, descriptor_start, descriptor_count, descriptor, index, entry_number;
local ubyte  io;

struct {
	char   magic[0x4];
	uint32 file_size;
	uint32 entry_count;
	uint32 reserved_1;
} ini1_header;

typedef enum <ubyte> {
	ProcessAddressSpace_AddressSpace32Bit = 0,
	ProcessAddressSpace_AddressSpace64Bit = 1
} ProcessAddressSpace;

typedef struct {
	ubyte Flags_TextCompress           : 1;
	ubyte Flags_RoCompress             : 1;
	ubyte Flags_DataCompress           : 1;
	ubyte Flags_Is64BitInstruction     : 1;
	ProcessAddressSpace Flags_ProcessAddressSpace : 1;
	ubyte Flags_UseSystemPoolPartition : 1;
} Flags;

typedef struct {
	uint32 offset;
	uint32 decompressed_size;
	uint32 compressed_size;
} SegmentHeader;

typedef struct {
	uint32 ThreadInfo_EntryNumber     : 3;
	uint32 ThreadInfo_Reserved1       : 1;
	uint32 ThreadInfo_LowestPriority  : 6;
	uint32 ThreadInfo_HighestPriority : 6;
	uint32 ThreadInfo_MinCoreNumber   : 8;
	uint32 ThreadInfo_MaxCoreNumber   : 8;
} ThreadInfo;

void GetSystemCallId(uint32 id) {
	switch (id) {
		case 0:   uint32 SystemCallId_Unknown1                       : 1; break;
		case 1:   uint32 SystemCallId_SetHeapSize                    : 1; break;
		case 2:	  uint32 SystemCallId_SetMemoryPermission            : 1; break;
		case 3:   uint32 SystemCallId_SetMemoryAttribute             : 1; break;
		case 4:   uint32 SystemCallId_MapMemory                      : 1; break;
		case 5:   uint32 SystemCallId_UnmapMemory                    : 1; break;
		case 6:   uint32 SystemCallId_QueryMemory                    : 1; break;
		case 7:   uint32 SystemCallId_ExitProcess                    : 1; break;
		case 8:   uint32 SystemCallId_CreateThread                   : 1; break;
		case 9:   uint32 SystemCallId_StartThread                    : 1; break;
		case 10:  uint32 SystemCallId_ExitThread                     : 1; break;
		case 11:  uint32 SystemCallId_SleepThread                    : 1; break;
		case 12:  uint32 SystemCallId_GetThreadPriority              : 1; break;
		case 13:  uint32 SystemCallId_SetThreadPriority              : 1; break;
		case 14:  uint32 SystemCallId_GetThreadCoreMask              : 1; break;
		case 15:  uint32 SystemCallId_SetThreadCoreMask              : 1; break;
		case 16:  uint32 SystemCallId_GetCurrentProcessorNumber      : 1; break;
		case 17:  uint32 SystemCallId_SignalEvent                    : 1; break;
		case 18:  uint32 SystemCallId_ClearEvent                     : 1; break;
		case 19:  uint32 SystemCallId_MapSharedMemory                : 1; break;
		case 20:  uint32 SystemCallId_UnmapSharedMemory              : 1; break;
		case 21:  uint32 SystemCallId_CreateTransferMemory           : 1; break;
		case 22:  uint32 SystemCallId_CloseHandle                    : 1; break;
		case 23:  uint32 SystemCallId_ResetSignal                    : 1; break;
		case 24:  uint32 SystemCallId_WaitSynchronization            : 1; break;
		case 25:  uint32 SystemCallId_CancelSynchronization          : 1; break;
		case 26:  uint32 SystemCallId_ArbitrateLock                  : 1; break;
		case 27:  uint32 SystemCallId_ArbitrateUnlock                : 1; break;
		case 28:  uint32 SystemCallId_WaitProcessWideKeyAtomic       : 1; break;
		case 29:  uint32 SystemCallId_SignalProcessWideKey           : 1; break;
		case 30:  uint32 SystemCallId_GetSystemTick                  : 1; break;
		case 31:  uint32 SystemCallId_ConnectToNamedPort             : 1; break;
		case 32:  uint32 SystemCallId_SendSyncRequestLight           : 1; break;
		case 33:  uint32 SystemCallId_SendSyncRequest                : 1; break;
		case 34:  uint32 SystemCallId_SendSyncRequestWithUserBuffer  : 1; break;
		case 35:  uint32 SystemCallId_SendAsyncRequestWithUserBuffer : 1; break;
		case 36:  uint32 SystemCallId_GetProcessId                   : 1; break;
		case 37:  uint32 SystemCallId_GetThreadId                    : 1; break;
		case 38:  uint32 SystemCallId_Break                          : 1; break;
		case 39:  uint32 SystemCallId_OutputDebugString              : 1; break;
		case 40:  uint32 SystemCallId_ReturnFromException            : 1; break;
		case 41:  uint32 SystemCallId_GetInfo                        : 1; break;
		case 42:  uint32 SystemCallId_FlushEntireDataCache           : 1; break;
		case 43:  uint32 SystemCallId_FlushDataCache                 : 1; break;
		case 44:  uint32 SystemCallId_MapPhysicalMemory              : 1; break;
		case 45:  uint32 SystemCallId_UnmapPhysicalMemory            : 1; break;
		case 46:  uint32 SystemCallId_GetDebugFutureThreadInfo       : 1; break;
		case 47:  uint32 SystemCallId_GetLastThreadInfo              : 1; break;
		case 48:  uint32 SystemCallId_GetResourceLimitLimitValue     : 1; break;
		case 49:  uint32 SystemCallId_GetResourceLimitCurrentValue   : 1; break;
		case 50:  uint32 SystemCallId_SetThreadActivity              : 1; break;
		case 51:  uint32 SystemCallId_GetThreadContext3              : 1; break;
		case 52:  uint32 SystemCallId_WaitForAddress                 : 1; break;
		case 53:  uint32 SystemCallId_SignalToAddress                : 1; break;
		case 54:  uint32 SystemCallId_SynchronizePreemptionState     : 1; break;
		case 55:  uint32 SystemCallId_Unknown55                      : 1; break;
		case 56:  uint32 SystemCallId_Unknown56                      : 1; break;
		case 57:  uint32 SystemCallId_Unknown57                      : 1; break;
		case 58:  uint32 SystemCallId_Unknown58                      : 1; break;
		case 59:  uint32 SystemCallId_Unknown59                      : 1; break;
		case 60:  uint32 SystemCallId_KernelDebug                    : 1; break;
		case 61:  uint32 SystemCallId_ChangeKernelTraceState         : 1; break;
		case 62:  uint32 SystemCallId_Unknown62                      : 1; break;
		case 63:  uint32 SystemCallId_Unknown63                      : 1; break;
		case 64:  uint32 SystemCallId_CreateSession                  : 1; break;
		case 65:  uint32 SystemCallId_AcceptSession                  : 1; break;
		case 66:  uint32 SystemCallId_ReplyAndReceiveLight           : 1; break;
		case 67:  uint32 SystemCallId_ReplyAndReceive                : 1; break;
		case 68:  uint32 SystemCallId_ReplyAndReceiveWithUserBuffer  : 1; break;
		case 69:  uint32 SystemCallId_CreateEvent                    : 1; break;
		case 70:  uint32 SystemCallId_Unknown70                      : 1; break;
		case 71:  uint32 SystemCallId_Unknown71                      : 1; break;
		case 72:  uint32 SystemCallId_MapPhysicalMemoryUnsafe        : 1; break;
		case 73:  uint32 SystemCallId_UnmapPhysicalMemoryUnsafe      : 1; break;
		case 74:  uint32 SystemCallId_SetUnsafeLimit                 : 1; break;
		case 75:  uint32 SystemCallId_CreateCodeMemory               : 1; break;
		case 76:  uint32 SystemCallId_ControlCodeMemory              : 1; break;
		case 77:  uint32 SystemCallId_SleepSystem                    : 1; break;
		case 78:  uint32 SystemCallId_ReadWriteRegister              : 1; break;
		case 79:  uint32 SystemCallId_SetProcessActivity             : 1; break;
		case 80:  uint32 SystemCallId_CreateSharedMemory             : 1; break;
		case 81:  uint32 SystemCallId_MapTransferMemory              : 1; break;
		case 82:  uint32 SystemCallId_UnmapTransferMemory            : 1; break;
		case 83:  uint32 SystemCallId_CreateInterruptEvent           : 1; break;
		case 84:  uint32 SystemCallId_QueryPhysicalAddress           : 1; break;
		case 85:  uint32 SystemCallId_QueryIoMapping                 : 1; break;
		case 86:  uint32 SystemCallId_CreateDeviceAddressSpace       : 1; break;
		case 87:  uint32 SystemCallId_AttachDeviceAddressSpace       : 1; break;
		case 88:  uint32 SystemCallId_DetachDeviceAddressSpace       : 1; break;
		case 89:  uint32 SystemCallId_MapDeviceAddressSpaceByForce   : 1; break;
		case 90:  uint32 SystemCallId_MapDeviceAddressSpaceAligned   : 1; break;
		case 91:  uint32 SystemCallId_MapDeviceAddressSpace          : 1; break;
		case 92:  uint32 SystemCallId_UnmapDeviceAddressSpace        : 1; break;
		case 93:  uint32 SystemCallId_InvalidateProcessDataCache     : 1; break;
		case 94:  uint32 SystemCallId_StoreProcessDataCache          : 1; break;
		case 95:  uint32 SystemCallId_FlushProcessDataCache          : 1; break;
		case 96:  uint32 SystemCallId_DebugActiveProcess             : 1; break;
		case 97:  uint32 SystemCallId_BreakDebugProcess              : 1; break;
		case 98:  uint32 SystemCallId_TerminateDebugProcess          : 1; break;
		case 99:  uint32 SystemCallId_GetDebugEvent                  : 1; break;
		case 100: uint32 SystemCallId_ContinueDebugEvent             : 1; break;
		case 101: uint32 SystemCallId_GetProcessList                 : 1; break;
		case 102: uint32 SystemCallId_GetThreadList                  : 1; break;
		case 103: uint32 SystemCallId_GetDebugThreadContext          : 1; break;
		case 104: uint32 SystemCallId_SetDebugThreadContext          : 1; break;
		case 105: uint32 SystemCallId_QueryDebugProcessMemory        : 1; break;
		case 106: uint32 SystemCallId_ReadDebugProcessMemory         : 1; break;
		case 107: uint32 SystemCallId_WriteDebugProcessMemory        : 1; break;
		case 108: uint32 SystemCallId_SetHardwareBreakPoint          : 1; break;
		case 109: uint32 SystemCallId_GetDebugThreadParam            : 1; break;
		case 110: uint32 SystemCallId_Unknown110                     : 1; break;
		case 111: uint32 SystemCallId_GetSystemInfo                  : 1; break;
		case 112: uint32 SystemCallId_CreatePort                     : 1; break;
		case 113: uint32 SystemCallId_ManageNamedPort                : 1; break;
		case 114: uint32 SystemCallId_ConnectToPort                  : 1; break;
		case 115: uint32 SystemCallId_SetProcessMemoryPermission     : 1; break;
		case 116: uint32 SystemCallId_MapProcessMemory               : 1; break;
		case 117: uint32 SystemCallId_UnmapProcessMemory             : 1; break;
		case 118: uint32 SystemCallId_QueryProcessMemory             : 1; break;
		case 119: uint32 SystemCallId_MapProcessCodeMemory           : 1; break;
		case 120: uint32 SystemCallId_UnmapProcessCodeMemory         : 1; break;
		case 121: uint32 SystemCallId_CreateProcess                  : 1; break;
		case 122: uint32 SystemCallId_StartProcess                   : 1; break;
		case 123: uint32 SystemCallId_TerminateProcess               : 1; break;
		case 124: uint32 SystemCallId_GetProcessInfo                 : 1; break;
		case 125: uint32 SystemCallId_CreateResourceLimit            : 1; break;
		case 126: uint32 SystemCallId_SetResourceLimitLimitValue     : 1; break;
		case 127: uint32 SystemCallId_CallSecureMonitor              : 1; break;
		default:
			uint32 SystemCallId_Reserved1                            : 16;
			j = 24;
			break;
	}
}

typedef struct {
	uint32 EnableSystemCalls_EntryNumber : 4;
	uint32 EnableSystemCalls_Reserved1   : 1;
	for (j = 0; j < 24; j++) {
		GetSystemCallId((index * 24) + j);
	}
	uint32 EnableSystemCalls_Index       : 3;
} EnableSystemCalls;

typedef enum <uint32> {
	PermissionType_RW = 0,
	PermissionType_RO = 1
} PermissionType;

typedef enum <uint32> {
	MappingType_Io     = 0,
	MappingType_Static = 1
} MappingType;

typedef struct {
	uint32 MemoryMap_EntryNumber : 6;
	uint32 MemoryMap_Reserved1   : 1;
	if (!io) {
		uint32 MemoryMap_BeginAddress : 24;
		PermissionType MemoryMap_PermissionType : 1;
		io = 1;
	} else {
		uint32 MemoryMap_Size         : 24;
		MappingType MemoryMap_MappingType : 1;
		io = 0;
	}
} MemoryMap;

typedef struct {
	uint32 IoMemoryMap_EntryNumber  : 7;
	uint32 IoMemoryMap_Reserved1    : 1;
	uint32 IoMemoryMap_BeginAddress : 24;
} IoMemoryMap;

typedef enum <uint32> {
	RegionType_NoMapping         = 0,
	RegionType_KernelTraceBuffer = 1,
	RegionType_OnMemoryBootImage = 2,
	RegionType_DTB               = 3
} RegionType;

typedef struct {
	uint32 MemoryRegionMap_EntryNumber : 10;
	uint32 MemoryRegionMap_Reserved1   : 1;
	RegionType MemoryRegionMap_RegionType0 : 6;
	PermissionType MemoryRegionMap_PermissionType0 : 1;
	RegionType MemoryRegionMap_RegionType1 : 6;
	PermissionType MemoryRegionMap_PermissionType1 : 1;
	RegionType MemoryRegionMap_RegionType2 : 6;
	PermissionType MemoryRegionMap_PermissionType2 : 1;
} MemoryRegionMap;

typedef struct {
	uint32 EnableInterrupts_EntryNumber      : 11;
	uint32 EnableInterrupts_Reserved1        : 1;
	uint32 EnableInterrupts_InterruptNumber0 : 10;
	uint32 EnableInterrupts_InterruptNumber1 : 10;
} EnableInterrupts;

typedef enum <uint32> {
	ProgramType_System      = 0,
	ProgramType_Application = 1,
	ProgramType_Applet      = 2
} ProgramType;

typedef struct {
	uint32 MiscParams_EntryNumber : 13;
	uint32 MiscParams_Reserved1   : 1;
	ProgramType MiscParams_ProgramType : 3;
} MiscParams;

typedef struct {
	uint32 KernelVersion_EntryNumber  : 14;
	uint32 KernelVersion_Reserved1    : 1;
	uint32 KernelVersion_MinorVersion : 4;
	uint32 KernelVersion_MajorVersion : 13;
} KernelVersion;

typedef struct {
	uint32 HandleTableSize_EntryNumber     : 15;
	uint32 HandleTableSize_Reserved1       : 1;
	uint32 HandleTableSize_HandleTableSize : 10;
} HandleTableSize;

typedef enum <uint32> {
	Debug_False = 0,
	Debug_True  = 1
} Debug;

typedef struct {
	uint32 MiscFlags_EntryNumber : 16;
	uint32 MiscFlags_Reserved1   : 1;
	Debug  MiscFlags_EnableDebug : 1;
	Debug  MiscFlags_ForceDebug  : 1;
} MiscFlags;

typedef struct {
	descriptor_start = FTell();
	descriptor_count = 0x80 / 0x4;
	for (i = 0; i < descriptor_count; i++) {
		descriptor = ReadUInt(descriptor_start + (i * 0x4));
		index = descriptor >> 29;
		entry_number = 0;
		if (descriptor == 0xFFFFFFFF) {
			ubyte reserved_1[(descriptor_count * 0x4) - (i * 0x4)];
			break;
		}
		while (descriptor & 1) {
			descriptor >>= 1;
			entry_number++;
		}
		switch (entry_number) {
			case 3:
				ThreadInfo thread_info;
				break;
			case 4:
				EnableSystemCalls enable_system_calls;
				break;
			case 6:
				MemoryMap memory_map;
				break;
			case 7:
				IoMemoryMap io_memory_map;
				break;
			case 10:
				MemoryRegionMap memory_region_map;
				break;
			case 11:
				EnableInterrupts enable_interrupts;
				break;
			case 13:
				MiscParams misc_params;
				break;
			case 14:
				KernelVersion kernel_version;
				break;
			case 15:
				HandleTableSize handle_table_size;
				break;
			case 16:
				MiscFlags misc_flags;
				break;
		}
	}
} KcData;

struct {
	char   magic[0x4];
	char   name[0xC];
	uint64 program_id;
	uint32 version;
	ubyte  main_thread_priority;
	ubyte  main_thread_core_number;
	ubyte  padding_1;
	Flags  flags;
	SegmentHeader text;
	uint32 padding_2;
	SegmentHeader ro;
	uint32 main_thread_stack_size;
	SegmentHeader data;
	uint32 padding_3;
	SegmentHeader bss;
	ubyte  padding_4[0x24];
	KcData kc_data;
} kip1_header[ini1_header.entry_count];
