LittleEndian();
DisplayFormatHex();

local uint32 extended_data_size, i, content_meta_info_count, fragment_indicator_count;

struct Version {
	uint32 Version_MinorRelstep : 8;
	uint32 Version_MajorRelstep : 8;
	uint32 Version_Micro        : 4;
	uint32 Version_Minor        : 6;
	uint32 Version_Major        : 6;
};

enum <ubyte> ContentMetaType {
	ContentMetaType_SystemProgram        = 1,
	ContentMetaType_SystemData           = 2,
	ContentMetaType_SystemUpdate         = 3,
	ContentMetaType_BootImagePackage     = 4,
	ContentMetaType_BootImagePackageSafe = 5,
	ContentMetaType_Application          = 128,
	ContentMetaType_Patch                = 129,
	ContentMetaType_AddOnContent         = 130,
	ContentMetaType_Delta                = 131
};

struct ContentMetaAttribute {
	ubyte ContentMetaAttribute_IncludesExFatDriver : 1;
	ubyte ContentMetaAttribute_Rebootless          : 1;
	ubyte ContentMetaAttribute_Reserved1           : 6;
};

enum <ubyte> StorageId {
	StorageId_None          = 0,
	StorageId_Host          = 1,
	StorageId_GameCard      = 2,
	StorageId_BuiltInSystem = 3,
	StorageId_BuiltInUser   = 4,
	StorageId_SdCard        = 5,
	StorageId_Any           = 6
};

enum <ubyte> ContentInstallType {
	ContentInstallType_Full         = 0,
	ContentInstallType_FragmentOnly = 1
};

struct InstallState {
	ubyte InstallState_Committed : 1;
	ubyte InstallState_Reserved1 : 7;
};

struct PackagedContentMetaHeader {
	uint64 id;
	Version version;
	ContentMetaType content_meta_type;
	ubyte  reserved_1;
	uint16 extended_header_size;
	uint16 content_count;
	uint16 content_meta_count;
	ContentMetaAttribute content_meta_attribute;
	StorageId storage_id;
	ContentInstallType content_install_type;
	InstallState install_state;
	Version required_download_system_version;
	uint32 reserved_2;
};

struct SystemUpdateMetaExtendedHeader {
	uint32 extended_data_size;
};

struct ApplicationMetaExtendedHeader {
	uint64 patch_id;
	Version required_system_version;
	Version required_application_version;
};

struct PatchMetaExtendedHeader {
	uint64 application_id;
	Version required_system_version;
	uint32 extended_data_size;
	uint64 reserved_1;
};

struct AddOnContentMetaExtendedHeader {
	uint64 application_id;
	Version required_application_version;
	uint32 reserved_1;
};

struct DeltaMetaExtendedHeader {
	uint64 application_id;
	uint32 extended_data_size;
	uint32 reserved_1;
};

enum <ubyte> ContentType {
	ContentType_Meta             = 0,
	ContentType_Program          = 1,
	ContentType_Data             = 2,
	ContentType_Control          = 3,
	ContentType_HtmlDocument     = 4,
	ContentType_LegalInformation = 5,
	ContentType_DeltaFragment    = 6
};

struct ContentInfo {
	ubyte  content_id[0x10];
	uint32 size_low;
	uint16 size_high;
	ContentType content_type;
	ubyte  id_offset;
};

struct PackagedContentInfo {
	ubyte hash[0x20];
	ContentInfo content_info;
};

struct ContentMetaInfo {
	uint64 id;
	Version version;
	ContentMetaType content_meta_type;
	ContentMetaAttribute content_meta_attribute;
	uint16 reserved_1;
};

struct SystemUpdateMetaExtendedDataHeader {
	uint32 version;
	uint32 variation_count;
};

struct FirmwareVariationInfoV1 {
	uint32 firmware_variation_id;
	ubyte  reserved_1[0x1C];
};

struct FirmwareVariationInfoV2 {
	ubyte  refer_to_base;
	ubyte  reserved_1[0x3];
	uint32 meta_count;
	ubyte  reserved_2[0x18];
};

struct SystemUpdateMetaExtendedData {
	SystemUpdateMetaExtendedDataHeader system_update_meta_extended_data_header;
	if (system_update_meta_extended_data_header.version == 1) {
		FirmwareVariationInfoV1 firmware_variation_info[system_update_meta_extended_data_header.variation_count];
	} else if (system_update_meta_extended_data_header.version == 2) {
		uint32 firmware_variation_ids[system_update_meta_extended_data_header.variation_count];
		FirmwareVariationInfoV2 firmware_variation_info[system_update_meta_extended_data_header.variation_count];
		for (i = 0; i < system_update_meta_extended_data_header.variation_count; i++) {
			if (!firmware_variation_info[i].refer_to_base) {
				content_meta_info_count += firmware_variation_info[i].meta_count;
			}
		}
		ContentMetaInfo content_meta_info[content_meta_info_count];
	}
};

struct PatchMetaExtendedDataHeader {
	uint32 history_count;
	uint32 delta_history_count;
	uint32 delta_count;
	uint32 fragment_set_count;
	uint32 history_content_count;
	uint32 delta_content_count;
	uint32 reserved_1;
};

struct ContentMetaKey {
	uint64 id;
	Version version;
	ContentMetaType content_meta_type;
	ContentInstallType content_install_type;
	uint16 reserved_1;
};

struct PatchHistoryHeader {
	ContentMetaKey content_meta_key;
	ubyte  digest[0x20];
	uint16 content_info_count;
	ubyte  reserved_1[0x6];
};

struct PatchDeltaHistory {
	uint64 source_patch_id;
	uint64 destination_patch_id;
	Version source_version;
	Version destination_version;
	uint64 download_size;
	uint64 reserved_1;
};

struct PatchDeltaHeader {
	uint64 source_patch_id;
	uint64 destination_patch_id;
	Version source_version;
	Version destination_version;
	uint16 fragment_set_count;
	ubyte  reserved_1[0x6];
	uint16 content_info_count;
	ubyte  reserved_2[0x6];
};

enum <ubyte> UpdateType {
	UpdateType_ApplyAsDelta = 0,
	UpdateType_Overwrite    = 1,
	UpdateType_Create       = 2
};

struct FragmentSet {
	ubyte  source_content_id[0x10];
	ubyte  destination_content_id[0x10];
	uint32 source_size_low;
	uint16 source_size_high;
	uint32 destination_size_low;
	uint16 destination_size_high;
	uint16 fragment_count;
	ContentType fragment_target_content_type;
	UpdateType update_type;
	uint32 reserved_1;
};

struct FragmentIndicator {
	uint16 content_info_index;
	uint16 fragment_index;
};

struct PatchMetaExtendedData {
	PatchMetaExtendedDataHeader patch_meta_extended_data_header;
	PatchHistoryHeader patch_history_headers[patch_meta_extended_data_header.history_count];
	PatchDeltaHistory patch_delta_histories[patch_meta_extended_data_header.delta_history_count];
	PatchDeltaHeader patch_delta_headers[patch_meta_extended_data_header.delta_count];
	FragmentSet fragment_sets[patch_meta_extended_data_header.fragment_set_count];
	ContentInfo history_content_info[patch_meta_extended_data_header.history_content_count];
	PackagedContentInfo delta_packaged_content_info[patch_meta_extended_data_header.delta_content_count];
	for (i = 0; i < patch_meta_extended_data_header.fragment_set_count; i++) {
		fragment_indicator_count += fragment_sets[i].fragment_count;
	}
	FragmentIndicator fragment_indicators[fragment_indicator_count];
};

struct DeltaMetaExtendedDataHeader {
	uint64 source_patch_id;
	uint64 destination_patch_id;
	Version source_version;
	Version destination_version;
	uint16 fragment_set_count;
	ubyte  reserved_1[0x6];
};

struct DeltaMetaExtendedData {
	DeltaMetaExtendedDataHeader delta_meta_extended_data_header;
	FragmentSet fragment_sets[delta_meta_extended_data_header.fragment_set_count];
	for (i = 0; i < patch_meta_extended_data_header.fragment_set_count; i++) {
		fragment_indicator_count += fragment_sets[i].fragment_count;
	}
	FragmentIndicator fragment_indicators[fragment_indicator_count];
};

struct PackagedContentMeta {
	PackagedContentMetaHeader packaged_content_meta_header;
	if (packaged_content_meta_header.extended_header_size != 0) {
		switch (packaged_content_meta_header.content_meta_type) {
			case ContentMetaType_SystemUpdate:
				SystemUpdateMetaExtendedHeader system_update_meta_extended_header;
				extended_data_size = system_update_meta_extended_header.extended_data_size;
				break;
			case ContentMetaType_Application:
				ApplicationMetaExtendedHeader application_meta_extended_header;
				break;
			case ContentMetaType_Patch:
				PatchMetaExtendedHeader patch_meta_extended_header;
				extended_data_size = patch_meta_extended_header.extended_data_size;
				break;
			case ContentMetaType_AddOnContent:
				AddOnContentMetaExtendedHeader add_on_content_meta_extended_header;
				break;
			case ContentMetaType_Delta:
				DeltaMetaExtendedHeader delta_meta_extended_header;
				extended_data_size = delta_meta_extended_header.extended_data_size;
				break;
		}
	}
	PackagedContentInfo packaged_content_info[packaged_content_meta_header.content_count];
	ContentMetaInfo content_meta_info[packaged_content_meta_header.content_meta_count];
	if (extended_data_size != 0) {
		switch (packaged_content_meta_header.content_meta_type) {
			case ContentMetaType_SystemUpdate:
				SystemUpdateMetaExtendedData system_update_meta_extended_data;
				break;
			case ContentMetaType_Patch:
				PatchMetaExtendedData patch_meta_extended_data;
				break;
			case ContentMetaType_Delta:
				DeltaMetaExtendedData delta_meta_extended_data;
				break;
		}
	}
	ubyte digest[0x20];
} packaged_content_meta;
