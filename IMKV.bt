LittleEndian();
DisplayFormatHex();

local uint32 extended_data_size = 0;

struct {
	char magic[0x4];
	uint32 padding_1;
	uint32 entry_count;
} kvdb_header;

typedef enum <ubyte> {
	CONTENT_META,
	CONTENT_PROGRAM,
	CONTENT_DATA,
	CONTENT_CONTROL,
	CONTENT_HTML_DOCUMENT,
	CONTENT_LEGAL_INFORMATION,
	CONTENT_DELTA_FRAGMENT
} content_type_t;

typedef enum <ubyte> {
	META_SYSTEM_PROGRAM = 0x1,
	META_SYSTEM_DATA,
	META_SYSTEM_UPDATE,
	META_BOOT_IMAGE_PACKAGE,
	META_BOOT_IMAGE_PACKAGE_SAFE,
	META_APPLICATION = 0x80,
	META_PATCH,
	META_ADD_ON_CONTENT,
	META_DELTA
} content_meta_type_t;

typedef struct {
	ubyte ATTRIBUTE_INCLUDEX_EX_FAT_DRIVER : 1;
	ubyte ATTRIBUTE_REBOOTLESS : 1;
} content_meta_attribute_t;

typedef enum <ubyte> {
	INSTALL_FULL,
	INSTALL_FRAGMENT_ONLY
} content_install_type_t;

typedef enum <ubyte> {
	STORAGE_NONE,
	STORAGE_HOST,
	STORAGE_GAME_CARD,
	STORAGE_NAND_SYSTEM,
	STORAGE_NAND_USER,
	STORAGE_SD_CARD
} storage_id_t;

typedef struct {
	ubyte content_id[0x10];
	uint32 size_low;
	uint16 size_high;
	content_type_t content_type;
	ubyte id_offset;
} content_info_t;

typedef struct {
	uint64 title_id;
	uint32 version;
	content_meta_type_t content_meta_type;
	content_meta_attribute_t content_meta_attribute;
	uint16 padding_1;
} content_meta_info_t;

typedef struct {
	uint64 title_id;
	uint32 version;
	content_meta_type_t content_meta_type;
	content_install_type_t content_install_type;
	uint16 padding_1;
} content_meta_key_t;

typedef struct {
	uint16 extended_header_size;
	uint16 content_count;
	uint16 content_meta_count;
	content_meta_attribute_t content_meta_attribute;
	storage_id_t storage_id;
	if (extended_header_size > 0) {
		switch (key.content_meta_type) {
			case META_SYSTEM_UPDATE:
				uint32 extended_data_size;
				break;
			case META_APPLICATION:
				uint64 patch_id;
				uint32 required_system_version;
				uint32 padding_1;
				break;
			case META_PATCH:
				uint64 application_id;
				uint32 required_system_version;
				uint32 extended_data_size;
				uint64 padding_1;
				break;
			case META_ADD_ON_CONTENT:
				uint64 application_id;
				uint32 required_application_version;
				uint32 padding_1;
				break;
			case META_DELTA:
				uint64 application_id;
				uint32 extended_data_size;
				uint32 padding_1;
				break;
		}
	}
	if (content_count > 0) {
		content_info_t content_info[content_count];
	}
	if (content_meta_count > 0) {
		content_meta_info_t content_meta_info[content_meta_count];
	}
	if (extended_data_size > 0) {
		ubyte extended_data[extended_data_size];
	}
} content_meta_value_t;

typedef enum <ubyte> {
	TYPE_SYSTEM_SAVE_DATA,
	TYPE_SAVE_DATA,
	TYPE_BCAT_DELIVERY_CACHE_STORAGE,
	TYPE_DEVICE_SAVE_DATA,
	TYPE_TEMPORARY_STORAGE,
	TYPE_CACHE_STORAGE,
	TYPE_BCAT_SYSTEM_STORAGE
} save_data_type_t;

typedef enum <ubyte> {
	RANK_PRIMARY,
	RANK_SECONDARY
} save_data_rank_t;

typedef enum <ubyte> {
	SPACE_NAND_SYSTEM,
	SPACE_NAND_USER,
	SPACE_SD_CARD,
	SPACE_TEMPORARY_STORAGE
} save_data_space_id_t;

typedef struct {
	uint64 title_id;
	ubyte user_id[0x10];
	uint64 save_id;
	save_data_type_t save_data_type;
	save_data_rank_t save_data_rank;
	uint16 index;
	ubyte padding_1[0x1C];
} save_data_key_t;

typedef struct {
	uint64 save_id;
	uint64 size;
	uint64 padding_1;
	save_data_space_id_t save_data_space_id;
	ubyte padding_2[0x27];
} save_data_value_t;

struct {
	char magic[0x4];
	uint32 key_size;
	uint32 value_size;
	if (key_size == 0x10) {
		content_meta_key_t key;
		content_meta_value_t value;
	} else if (key_size == 0x40) {
		save_data_key_t key;
		save_data_value_t value;
	}
} kvdb_entry[kvdb_header.entry_count] <optimize=false>;
