LittleEndian();
DisplayFormatHex();

local uint32 extended_data_size;

/* ContentMeta */
struct Version {
	uint32 Version_MinorRelstep : 8;
	uint32 Version_MajorRelstep : 8;
	uint32 Version_Micro        : 4;
	uint32 Version_Minor        : 6;
	uint32 Version_Major        : 6;
};

enum <ubyte> ContentMetaType {
	ContentMetaType_SystemProgram        = 1,
	ContentMetaType_SystemData           = 2,
	ContentMetaType_SystemUpdate         = 3,
	ContentMetaType_BootImagePackage     = 4,
	ContentMetaType_BootImagePackageSafe = 5,
	ContentMetaType_Application          = 128,
	ContentMetaType_Patch                = 129,
	ContentMetaType_AddOnContent         = 130,
	ContentMetaType_Delta                = 131
};

enum <ubyte> ContentInstallType {
	ContentInstallType_Full         = 0,
	ContentInstallType_FragmentOnly = 1
};

struct ContentMetaKey {
	uint64 id;
	Version version;
	ContentMetaType content_meta_type;
	ContentInstallType content_install_type;
	uint16 reserved_1;
};

struct ContentMetaAttribute {
	ubyte ContentMetaAttribute_IncludesExFatDriver : 1;
	ubyte ContentMetaAttribute_Rebootless          : 1;
	ubyte ContentMetaAttribute_Reserved1           : 6;
};

enum <ubyte> StorageId {
	StorageId_None          = 0,
	StorageId_Host          = 1,
	StorageId_GameCard      = 2,
	StorageId_BuiltInSystem = 3,
	StorageId_BuiltInUser   = 4,
	StorageId_SdCard        = 5,
	StorageId_Any           = 6
};

struct ContentMetaHeader {
	uint16 extended_header_size;
	uint16 content_count;
	uint16 content_meta_count;
	ContentMetaAttribute content_meta_attribute;
	StorageId storage_id;
};

struct SystemUpdateMetaExtendedHeader {
	uint32 extended_data_size;
};

struct ApplicationMetaExtendedHeader {
	uint64 patch_id;
	Version required_system_version;
	Version required_application_version;
};

struct PatchMetaExtendedHeader {
	uint64 application_id;
	Version required_system_version;
	uint32 extended_data_size;
	uint64 reserved_1;
};

struct AddOnContentMetaExtendedHeader {
	uint64 application_id;
	Version required_application_version;
	uint32 reserved_1;
};

struct DeltaMetaExtendedHeader {
	uint64 application_id;
	uint32 extended_data_size;
	uint32 reserved_1;
};

enum <ubyte> ContentType {
	ContentType_Meta             = 0,
	ContentType_Program          = 1,
	ContentType_Data             = 2,
	ContentType_Control          = 3,
	ContentType_HtmlDocument     = 4,
	ContentType_LegalInformation = 5,
	ContentType_DeltaFragment    = 6
};

struct ContentInfo {
	ubyte  content_id[0x10];
	uint32 size_low;
	uint16 size_high;
	ContentType content_type;
	ubyte  id_offset;
};

struct ContentMetaInfo {
	uint64 id;
	Version version;
	ContentMetaType content_meta_type;
	ContentMetaAttribute content_meta_attribute;
	uint16 reserved_1;
};

struct ContentMeta {
	ContentMetaKey content_meta_key;
	ContentMetaHeader content_meta_header;
	if (content_meta_header.extended_header_size > 0) {
		switch (content_meta_key.content_meta_type) {
			case ContentMetaType_SystemUpdate:
				SystemUpdateMetaExtendedHeader system_update_meta_extended_header;
				extended_data_size = system_update_meta_extended_header.extended_data_size;
				break;
			case ContentMetaType_Application:
				ApplicationMetaExtendedHeader application_meta_extended_header;
				break;
			case ContentMetaType_Patch:
				PatchMetaExtendedHeader patch_meta_extended_header;
				extended_data_size = patch_meta_extended_header.extended_data_size;
				break;
			case ContentMetaType_AddOnContent:
				AddOnContentMetaExtendedHeader add_on_content_meta_extended_header;
				break;
			case ContentMetaType_Delta:
				DeltaMetaExtendedHeader delta_meta_extended_header;
				extended_data_size = delta_meta_extended_header.extended_data_size;
				break;
		}
	}
	ContentInfo content_info[content_meta_header.content_count];
	ContentMetaInfo content_meta_info[content_meta_header.content_meta_count];
	ubyte extended_data[extended_data_size]; /* Looks like this is empty for everything but SystemUpdate, but the data is incorrect. */
	extended_data_size = 0;
};

/* SaveData */
enum <ubyte> SaveDataType {
	SaveDataType_System     = 0,
	SaveDataType_Account    = 1,
	SaveDataType_Bcat       = 2,
	SaveDataType_Device     = 3,
	SaveDataType_Temporary  = 4,
	SaveDataType_Cache      = 5,
	SaveDataType_SystemBcat = 6
};

enum <ubyte> SaveDataRank {
	SaveDataRank_Primary   = 0,
	SaveDataRank_Secondary = 1
};

struct SaveDataAttribute {
	uint64 application_id;
	ubyte  user_id[0x10];
	uint64 save_data_id;
	SaveDataType save_data_type;
	SaveDataRank save_data_rank;
	uint16 save_data_index;
	ubyte  reserved_1[0x1C];
};

enum <ubyte> SaveDataSpaceId {
	SaveDataSpaceId_BuiltInSystem = 0,
	SaveDataSpaceId_BuiltInUser   = 1,
	SaveDataSpaceId_SdCardSystem  = 2,
	SaveDataSpaceId_Temporary     = 3,
	SaveDataSpaceId_SdCardCache   = 4,
	SaveDataSpaceId_ProperSystem  = 100,
	SaveDataSpaceId_SafeMode      = 101,
	SaveDataSpaceId_BisAuto       = 127
};

enum <ubyte> SaveDataState {
	SaveDataState_Normal  = 0,
	SaveDataState_Create  = 1,
	SaveDataState_Unknown = 2,
	SaveDataState_Delete  = 3,
	SaveDataState_Extend  = 4
};

struct SaveDataIndexer {
	uint64 save_data_id;
	uint64 save_data_size;
	uint64 reserved_1;
	SaveDataSpaceId save_data_space_id;
	SaveDataState save_data_state;
	ubyte  reserved_2[0x26];
};

struct SaveData {
	SaveDataAttribute save_data_attribute;
	SaveDataIndexer save_data_indexer;
};

/* IMKVDB */
struct KvdbHeader {
	char   magic[0x4];
	uint32 reserved_1;
	uint32 entry_count;
} kvdb_header;

struct KvdbEntry {
	char   magic[0x4];
	uint32 key_size;
	uint32 value_size;
	if (key_size == 0x10) {
		ContentMeta content_meta; /* 8000000000000120 (BuiltInSystem) - 8000000000000121 (BuiltInUser) - 8000000000000124 (SdCard) */
	} else if (key_size == 0x40) {
		SaveData save_data;       /* 8000000000000000 */
	}
} kvdb_entry[kvdb_header.entry_count] <optimize=false>;
