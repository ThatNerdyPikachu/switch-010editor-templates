LittleEndian();
DisplayFormatHex();

struct {
	uint32 package1_loader_hash;
	uint32 secure_monitor_hash;
	uint32 nx_bootloader_hash;
	uint32 build_id;
	char   build_timestamp[0xE];
	uint16 version;
} package1_loader_header;

FSeek(0x3FE0); /* Offset is different for newer package1 */
struct {
	uint32 size;
	ubyte  reserved_1[0xC];
	ubyte  ctr[0x10];
} pk11_encryption;

typedef struct {
	uint32 size;
	uint32 offset;
} SegmentHeader;

struct {
	char   magic[0x4];
	if (magic != "PK11") {
		Warning("File is not decrypted.");
		Exit(-1);
	}
	if (package1_loader_header.version <= 0x600) {
		SegmentHeader secure_monitor;
	} else {
		SegmentHeader warmboot;
	}
	uint32 reserved_1;
	section_header_t nx_bootloader;
	if (package1_loader_header.version <= 0x600) {
		SegmentHeader warmboot;
	} else {
		SegmentHeader secure_monitor;
	}
} pk11_header;
